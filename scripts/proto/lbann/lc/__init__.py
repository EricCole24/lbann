"""Utility functions for LC systems.

These are a convenience for developers and users at LLNL.

"""

import os, os.path
import datetime
import argparse
from lbann.utils import lbann_dir
from lbann.lc.systems import *
from lbann.lc.paths import *
import lbann.lc.slurm

# ==============================================
# Common command-line arguments
# ==============================================

def add_scheduler_arguments(parser):
    """Add command-line arguments for common scheduler settings.

    Adds the following options: nodes, procs_per_node, partition,
    account, time_limit. The caller is responsible for using them.

    Args:
        parser (argparse.ArgumentParser): command-line argument
            parser.

    """
    if not isinstance(parser, argparse.ArgumentParser):
        raise TypeError('expected an argparse.ArgumentParser')
    parser.add_argument(
        '--nodes', action='store', type=int,
        help='number of compute nodes', metavar='NUM')
    parser.add_argument(
        '--procs-per-node', action='store', type=int,
        help='number of processes per compute node', metavar='NUM')
    parser.add_argument(
        '--partition', action='store', type=str,
        help='scheduler partition', metavar='NAME')
    parser.add_argument(
        '--account', action='store', type=str,
        help='scheduler account', metavar='NAME')
    parser.add_argument(
        '--time-limit', action='store', type=int,
        help='time limit (in minutes)', metavar='MIN')


# ==============================================
# Run experiments
# ==============================================

def run(model, data_reader, optimizer,
        experiment_dir = None,
        lbann_exe = lbann_exe(),
        lbann_args = '',
        job_name = 'lbann',
        nodes = 1,
        procs_per_node = procs_per_node(),
        system = system(),
        partition = partition(),
        account = account(),
        time_limit = time_limit(),
        setup_only = False):
    """Run LBANN experiment.

    This will either submit a batch job to the scheduler (if on a
    login node) or run LBANN with the current node allocation (if on a
    compute node). Behavior may vary across systems and schedulers.

    If an experiment directory is not provided, a timestamped
    directory is created (by default in `lbann/experiments`). The
    location of autogenerated experiment directories can be set with
    the environment variable `LBANN_EXPERIMENT_DIR`.

    Args:
        model (lbann.proto.Model or lbann_pb2.Model): Neural network
            model.
        data_reader (lbann_pb2.DataReader): Data reader.
        optimizer (lbann.proto.Model or lbann_pb2.Optimizer): Default
            optimizer for model.
        experiment_dir (str, optional): Experiment directory.
        lbann_exe (str, optional): LBANN executable.
        lbann_args (str, optional): Command-line arguments to LBANN
            executable.
        job_name (str, optional): Batch job name.
        nodes (int, optional): Number of compute nodes.
        procs_per_node (int, optional): Number of processes per compute
            node.
        system (str, optional): Target system.
        partition (str, optional): Scheduler partition.
        account (str, optional): Scheduler account.
        time_limit (int, optional): Job time limit, in minutes.
        setup_only (bool, optional): If true, the experiment is not
            run after the experiment directory is initialized.

    """

    # Construct experiment directory if needed
    if not experiment_dir:
        experiment_dir = os.path.join(lbann_dir(), 'experiments')
        if 'LBANN_EXPERIMENT_DIR' in os.environ:
            experiment_dir = os.environ['LBANN_EXPERIMENT_DIR']
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        experiment_dir = os.path.join(experiment_dir,
                                '{}_{}'.format(timestamp, job_name))
        i = 1
        while os.path.lexists(experiment_dir):
            i += 1
            experiment_dir = os.path.join(
                experiment_dir,
                '{}_{}_{}'.format(timestamp, job_name, i))
    experiment_dir = os.path.abspath(experiment_dir)
    os.makedirs(experiment_dir, exist_ok=True)

    # Create experiment prototext file
    prototext_file = os.path.join(experiment_dir, 'experiment.prototext')
    from lbann.proto import save_prototext
    save_prototext(prototext_file,
                   model = model,
                   data_reader = data_reader,
                   optimizer = optimizer)
    lbann_args += ' --prototext=' + prototext_file

    # Run experiment
    if scheduler() == 'slurm':
        slurm.run(experiment_dir = experiment_dir,
                  exe = lbann_exe,
                  exe_args = lbann_args,
                  nodes = nodes,
                  procs_per_node = procs_per_node,
                  job_name = job_name,
                  partition = partition,
                  account = account,
                  time_limit = time_limit,
                  setup_only = setup_only)
    else:
        raise RuntimeError('unsupported job scheduler ({})'
                           .format(scheduler()))

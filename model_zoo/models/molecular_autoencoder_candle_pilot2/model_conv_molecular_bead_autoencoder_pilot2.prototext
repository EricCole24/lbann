model {
  data_layout: "data_parallel"
  mini_batch_size: 32
  block_size: 256
  num_epochs: 4
  num_parallel_readers: 1
  procs_per_model: 0

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "mean_squared_error" }
    l2_weight_regularization {
      scale_factor: 0.0005
    }
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }
  callback {
    timer {
    }
  }

  ###################################################
  # start of layers
  ###################################################

  #######
  # INPUT
  #######
  layer {
    name: "input"
    children: "data label"
    data_layout: "data_parallel"
    input {
      io_buffer: "partitioned"
      target_mode: "reconstruction"
    }
  }
  layer {
    parents: "input"
    name: "data"
    data_layout: "data_parallel"
    split {}
  }
  layer {
    parents: "input"
    name: "label"
    data_layout: "data_parallel"
    split {}
  }

  #######
  # Flatten the data to 1d
  ######
  layer {
    parents: "data"
    name: "reshape1"
    data_layout: "data_parallel"
    num_neurons_from_data_reader: true
    reshape {
      reshape_to_flattened_conv_format: true
    }
  }

  #############
  # CONVOLUTION 1
  #############
  layer {
    parents: "reshape1"
    name: "bead_conv1"
    data_layout: "data_parallel"
    convolution {
      num_dims: 1
      num_output_channels: 512
      conv_dims: "20"
      conv_pads: "0"
      conv_strides: "20"
      has_bias: true
      has_vectors: true
    }
  }

  layer {
    parents: "bead_conv1"
    name: "bead_batch_norm1"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  ######
  # RELU 1
  ######
  layer {
    parents: "bead_batch_norm1"
    name: "bead_relu1"
    data_layout: "data_parallel"
    relu {
    }
  }

  #############
  # CONVOLUTION 1
  #############
  layer {
    parents: "bead_relu1"
    name: "mol_conv1"
    data_layout: "data_parallel"
    convolution {
      num_dims: 1
      num_output_channels: 1024
      conv_dims: "12"
      conv_pads: "0"
      conv_strides: "12"
      has_bias: true
      has_vectors: true
    }
  }

  layer {
    parents: "mol_conv1"
    name: "batch_norm1"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  ######
  # RELU 1
  ######
  layer {
    parents: "batch_norm1"
    name: "mol_relu1"
    data_layout: "data_parallel"
    relu {
    }
  }

  #############
  # FC 1
  #############
  layer {
    parents: "mol_relu1"
    name: "fc1"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 12
      has_bias: true
    }
  }

  layer {
    parents: "fc1"
    name: "batch_norm2"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  ######
  # RELU 1
  ######
  layer {
    parents: "batch_norm2"
    name: "relu_fc1"
    data_layout: "data_parallel"
    relu {
    }
  }

#DECODER

  #################
  # FULLY_CONNECTED decode1
  #################
  layer {
    parents: "relu_fc1"
    name: "d_fc1"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 11264
      has_bias: true
    }
  }

  layer {
    parents: "d_fc1"
    name: "batch_norm3"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  #######
  # RELU relu10
  #######
  layer {
    parents: "batch_norm3"
    name: "d_relu_fc1"
    data_layout: "data_parallel"
    relu {
    }
  }

  layer {
    parents: "d_relu_fc1"
    name: "d_reshape1"
    data_layout: "data_parallel"
    reshape {
      num_dims: 2
      dims: "1024 11"
    }
  }

  #############
  # DECONVOLUTION 1
  #############
  layer {
    parents: "d_reshape1"
    name: "molecular_deconv1"
    data_layout: "data_parallel"
#    num_neurons_from_data_reader: true
    deconvolution {
      num_dims: 1
      num_output_channels: 512
      conv_dims: "12"
      conv_pads: "0"
      conv_strides: "12"
      has_bias: true
      has_vectors: true
    }
  }

  layer {
    parents: "molecular_deconv1"
    name: "batch_norm4"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  ######
  # RELU 1
  ######
  layer {
    parents: "batch_norm4"
    name: "dc_mol_relu1"
    data_layout: "data_parallel"
    relu {
    }
  }

  #############
  # CONVOLUTION 1
  #############
  layer {
    parents: "dc_mol_relu1"
    name: "dc_bead_conv1"
    data_layout: "data_parallel"
    deconvolution {
      num_dims: 1
      num_output_channels: 1
      conv_dims: "20"
      conv_pads: "0"
      conv_strides: "20"
      has_bias: true
      has_vectors: true
    }
  }

  layer {
    parents: "dc_bead_conv1"
    name: "dc_bead_batch_norm1"
    data_layout: "data_parallel"
    batch_normalization {
      decay: 0.9
      scale_init: 1.0
      bias_init: 0.0
      epsilon: 1e-5
    }
  }

  #######
  # ELU sigmoid
  #######
  layer {
    parents: "dc_bead_batch_norm1"
    name: "elu20"
    data_layout: "data_parallel"
    elu {
    }
  }


  #################
  # RECONSTRUCTION
  #################
  layer {
    parents: "elu20"
    name: "reconstruction"
    data_layout: "data_parallel"
    split {}    
  }
  layer {
    parents: "reconstruction label"
    name: "mean_squared_error"
    data_layout: "data_parallel"
    mean_squared_error {}    
  }

  ###################################################
  # end of layers
  ###################################################
}
